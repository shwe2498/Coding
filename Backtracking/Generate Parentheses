Generate all combinations of well-formed parentheses. A parenthesis combination is well-formed if each opening parenthesis "(" is closed by a matching closing parenthesis ")" in the correct order.

For example, "()", "()()", and "((()))" are all combinations of well-formed parentheses, while ")(", "((" and "(()" are not.

Examples:
n = 1
output: ["()"]

n = 2
output: ["(())", "()()"]

n = 3
output: ["((()))", "(()())", "(())()", "()(())", "()()()"]

n = 4
output should contain: ["(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())", "(()())()", "(())(())", "(())()()", "()((()))", "()(()())", "()(())()", "()()(())", "()()()()"]


#include<iostream>
#include<vector>

using namespace std;

void generateParenthesesBacktrack(int n, int opening, int closing, string parenthesis, vector<string>& result){
    //Base case well formerd parenthesis length is 2*n push to result
    if(parenthesis.length() == 2 * n){
        result.push_back(parenthesis);
        return;
    }

    //Keep adding opening parenthesis for given number
    if(opening < n){
        generateParenthesesBacktrack(n, opening + 1, closing, parenthesis + '(', result);
    }

    //Keep adding closing parenthesis until it's not exceeding opening parenthesis
    if(closing < opening){
        generateParenthesesBacktrack(n, opening, closing + 1, parenthesis + ')', result);
    }
}

vector<string> generateParentheses(int n) {
    vector<string> result;
    if(n == 0) return result;
    generateParenthesesBacktrack(n, 0, 0, "", result);
    return result;
}

TC : The time complexity of generating all combinations of well-formed parentheses is often stated in terms of Catalan numbers because the number of valid parentheses strings of length `2n` is the nth Catalan number \(C_n\). The nth Catalan number can be approximated as \(C_n \approx \frac{4^n}{n^{3/2}\sqrt{\pi}}\).

Thus, the time complexity is \(O(\frac{4^n}{\sqrt{n}})\).

SC : The space complexity of the solution is determined by the recursion stack and the space required to store the results. 

- **Recursion Stack**: The maximum depth of the recursion is `2n`, so the space complexity due to recursion is \(O(n)\).
- **Result Storage**: The number of valid strings is the nth Catalan number, and each string is of length `2n`, so the space required to store the results is \(O(\frac{4^n}{\sqrt{n}} \cdot n) = O(\frac{4^n}{\sqrt{n}})\).

Therefore, the overall space complexity is \(O(\frac{4^n}{\sqrt{n}})\).
