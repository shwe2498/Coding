Given an array of unsorted numbers, find all unique triplets in it that add up to zero.

Example 1:

Input: [-3, 0, 1, 2, -1, 1, -2]
Output: [-3, 1, 2], [-2, 0, 2], [-2, 1, 1], [-1, 0, 1]
Explanation: There are four unique triplets whose sum is equal to zero.
Example 2:

Input: [-5, 2, -1, -2, 3]
Output: [[-5, 2, 3], [-2, -1, 3]]
Explanation: There are two unique triplets whose sum is equal to zero.

void searchPair(vector<int>& a, int targetSum, int left, vector<vector<int>>& triplets){
    int right = a.size() - 1;
    while(left < right){
      int curr_sum = a[left] + a[right];
      if(curr_sum == targetSum){
        triplets.push_back({-targetSum, a[left], a[right]});
        left++;
        right--;
        while(left < right && a[left] == a[left - 1]){
          left++;
        }
        while(left < right && a[right] == a[right + 1]){
          right--;
        }
      }
      else if(targetSum > curr_sum){
        left++;
      }
      else{
        right--;
      }
    }
  }
 
vector<vector<int>> searchTriplets(vector<int> &arr) {
    sort(arr.begin(), arr.end());
    vector<vector<int>> triplets;
    for(int i = 0; i < arr.size() - 2; i++){
      if(i > 0 && arr[i] == arr[i - 1]){
        continue;
      }
      searchPair(arr, -arr[i], i + 1, triplets);
    }
    return triplets;
  }
  
  //TC : O(n*n) SC : O(1)
