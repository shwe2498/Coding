/* Given an array of positive numbers and a positive number ‘k,’ find the maximum sum of any contiguous subarray of size ‘k’.

Example 1:

Input: [2, 1, 5, 1, 3, 2], k=3 
Output: 9
Explanation: Subarray with maximum sum is [5, 1, 3].
Example 2:

Input: [2, 3, 4, 1, 5], k=2 
Output: 7
Explanation: Subarray with maximum sum is [3, 4].
*/

using namespace std;

#include <iostream>
#include <vector>

class MaxSumSubArrayOfSizeK {
 public:
  static int findMaxSumSubArray(int k, const vector<int>& arr) {
    int maxSum = 0;
    int start = 0;
    int sum  = 0;
    for(int i = 0; i < arr.size(); i++){
      sum += arr[i];
      if(i >= k - 1){
        maxSum = max(maxSum, sum);
        sum -= arr[start];
        start++;
      }
    }
    return maxSum;
  }
};

TC : O(n) SC : O(1)
