/* Permutation in a String
Given a string and a pattern, find out if the string contains any permutation of the pattern.

Permutation is defined as the re-arranging of the characters of the string. For example, “abc” has the following six permutations:
abc
acb
bac
bca
cab
cba
If a string has ‘n’ distinct characters, it will have n!n! permutations.

Example 1:
Input: String="oidbcaf", Pattern="abc"
Output: true
Explanation: The string contains "bca" which is a permutation of the given pattern.

Example 2:
Input: String="odicf", Pattern="dc"
Output: false
Explanation: No permutation of the pattern is present in the given string as a substring.

Example 3:
Input: String="bcdxabcdy", Pattern="bcdyabcdx"
Output: true
Explanation: Both the string and the pattern are a permutation of each other.

Example 4:
Input: String="aaacb", Pattern="abc"
Output: true
Explanation: The string contains "acb" which is a permutation of the given pattern. */
using namespace std;

#include <iostream>
#include <string>
#include <vector>

class StringPermutation {
 public:
  static bool findPermutation(const string &str, const string &pattern) {
    int start = 0;
    int end = 0;
    vector<int> v1 (26,0);
    vector<int> v2 (26,0);
    for(auto p : pattern){
      v1[p - 'a']++;
    }
    while(end < str.size()){
      v2[str[end] - 'a']++;

      if(v1 == v2){
        return true;
      }
      if(end - start + 1 == pattern.size()){
        v2[str[start] - 'a']--;
        start++;
      }
      end++;
    }
    return false;
  }
};
// TC: O(n) SC : O(1)
