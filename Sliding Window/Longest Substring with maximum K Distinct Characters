/* Longest Substring with maximum K Distinct Characters
Given a string, find the length of the longest substring in it with no more than K distinct characters.

Input: String="araaci", K=2 Output: 4
Explanation: The longest substring with no more than '2' distinct characters is "araa".
Input: String="araaci", K=1 Output: 2
Explanation: The longest substring with no more than '1' distinct characters is "aa".
nput: String="cbbebi", K=3 Output: 5
Explanation: The longest substrings with no more than '3' distinct characters are "cbbeb" & "bbebi".
Input: String="cbbebi", K=10 Output: 6
Explanation: The longest substring with no more than '10' distinct characters is "cbbebi".*/

using namespace std;

#include <iostream>
#include <string>
#include <unordered_map>

class LongestSubstringKDistinct {
 public:
  static int findLength(const string& str, int k) {
    int maxLength = 0;
    int start = 0;
    unordered_map<char, int> freq;
    for(int end = 0; end < str.size(); end++){
      freq[str[end]]++;
      while(freq.size() > k){
        freq[str[start]]--;
        if(freq[str[start]] == 0){
          freq.erase(str[start]);
        }
        start++;
      }
      maxLength = max(maxLength, end - start + 1);
    }
    return maxLength;
  }
};

TC : O(n) SC : O(k)
